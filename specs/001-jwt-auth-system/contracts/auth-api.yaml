openapi: 3.0.3
info:
  title: JWT Authentication and Authorization API
  description: API specification for user authentication, authorization, and admin management
  version: 1.0.0
  contact:
    name: Pairwise Prioritization System

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate user and return JWT token in cookie
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              description: JWT token cookie
              schema:
                type: string
                example: auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=86400
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      summary: User logout
      description: Clear authentication cookie and invalidate session
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Logout successful
          headers:
            Set-Cookie:
              description: Clear auth cookie
              schema:
                type: string
                example: auth=; HttpOnly; Secure; SameSite=Strict; Max-Age=0
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/me:
    get:
      summary: Get current user info
      description: Retrieve authenticated user's profile and roles
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users:
    get:
      summary: List all users
      description: Retrieve paginated list of all users (admin only)
      tags:
        - Administration
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Users list retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListResponse"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create new user
      description: Create a new user account with roles (admin only)
      tags:
        - Administration
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve specific user details (admin only)
      tags:
        - Administration
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update user
      description: Update user details and roles (admin only)
      tags:
        - Administration
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/roles:
    get:
      summary: List all roles
      description: Get all available roles in the system
      tags:
        - Administration
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Roles list retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesListResponse"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth
      description: JWT token stored in HTTP-only cookie

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "admin"
        password:
          type: string
          minLength: 8
          maxLength: 100
          example: "securepassword123"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        user:
          $ref: "#/components/schemas/UserProfile"

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "admin"
        email:
          type: string
          example: "admin@example.com"
        is_active:
          type: boolean
          example: true
        roles:
          type: array
          items:
            type: string
          example: ["admin", "user"]
        created_at:
          type: string
          format: date-time
          example: "2025-10-28T12:00:00Z"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john@example.com"
        is_active:
          type: boolean
          example: true
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        created_at:
          type: string
          format: date-time
          example: "2025-10-28T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-28T12:00:00Z"

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "admin"
        description:
          type: string
          example: "Administrator with full system access"

    CreateUserRequest:
      type: object
      required:
        - username
        - password
        - roles
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "new_user"
        password:
          type: string
          minLength: 8
          maxLength: 100
          example: "securepassword123"
        email:
          type: string
          format: email
          example: "user@example.com"
        roles:
          type: array
          items:
            type: string
          example: ["user"]
        is_active:
          type: boolean
          default: true
          example: true

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "updated@example.com"
        roles:
          type: array
          items:
            type: string
          example: ["admin", "user"]
        is_active:
          type: boolean
          example: true

    UsersListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        pagination:
          $ref: "#/components/schemas/Pagination"

    RolesListResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        total_pages:
          type: integer
          example: 8

    MessageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Invalid credentials"
        code:
          type: string
          example: "INVALID_CREDENTIALS"
